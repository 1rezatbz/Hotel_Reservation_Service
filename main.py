from fastapi import FastAPI, Depends, status, HTTPExceptionfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestFormfrom fastapi.responses import JSONResponsefrom src.database import *from sqlalchemy.orm import Sessionfrom src import (models, schemas, crud, elastic, rediss)import password, jwttapp = FastAPI()oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")Base.metadata.create_all(bind=engine)def get_db():    db = SessionLocal()    try:        return db    finally:        db.close()def get_current_user(db: Session = Depends(get_db), token: str = Depends(oauth2_scheme)):    return jwtt.decoded_access_token(db, token)async def get_current_admin_user(current_user: models.User = Depends(get_current_user)):    if not current_user.admin:        raise HTTPException(status_code=400, detail="Just admin can use this, you are not allowed")    return current_user@app.get("/")def home():    """''    You are very welcome to Hotel RED    IN this Hotel you can add new user and room    ''"""    return {"message": " Welcome to Hotel Red"}@app.post("/token/")def login_for_access_token(db: Session = Depends(get_db), form_data: OAuth2PasswordRequestForm = Depends()):    user = jwtt.authenticate_user(db, form_data.username, form_data.password)    if not user:        raise HTTPException(status_code=401, detail="Incorrect username or password",                            headers={"WWW-Authenticate": "Bearer"})    token = jwtt.create_access_token(user_id=user.id)    header = {"Authorization": f"Bearer {token}"}    rediss.set_token(user.id, token)    return JSONResponse(headers=header)@app.get('/logout')def logout():    rediss.delete_token()    return {'message': 'You logout successfully'}@app.post("/create-room", response_model=schemas.RoomBase, status_code=status.HTTP_201_CREATED, tags=['ROOM'])def create_room(room_info: schemas.RoomBase, db: Session = Depends(get_db)):    room = crud.get_one_room(db, room_info.number)    if room:        raise HTTPException(status_code=409, detail="the room already existed")    crud.create_room(db, room_info)    return room_info@app.get("/get-rooms", tags=['ROOM'])def get_room(db: Session = Depends(get_db), current_user: models.User = Depends(get_current_admin_user)):    return crud.get_rooms(db)@app.get("/get-room/{room_id}", tags=['ROOM'])def get_a_room(room_id: int, db: Session = Depends(get_db), current_user: models.User = Depends(get_current_user)):    return crud.get_a_room(db, room_id)@app.get("/get-one-room", tags=['ROOM'])def get_one_room(room_number: str, db: Session = Depends(get_db)):    return crud.get_one_room(db, room_number)@app.post('/user-registration', response_model=schemas.UserBase, tags=['USER'], summary="Create new users",          description="It is very easy", response_description="the user")def user_registration(user_info: schemas.UserCreate, db: Session = Depends(get_db)):    user = crud.get_user(db, user_info.username)    if user:        raise HTTPException(status_code=409, detail="the user already existed")    user_info.password = password.get_password_hash(user_info.password)    crud.create_user(db, user_info)    return user_info@app.get('/get-users', tags=['USER'])def get_users(db: Session = Depends(get_db)):    return crud.get_users(db)@app.get('/get-user', tags=['USER'])def get_user(username: str, db: Session = Depends(get_db)):    return crud.get_user(db, username)@app.patch('/user_promotion', tags=['USER'])def user_promotion(user: schemas.UserBase, db: Session = Depends(get_db)):    if crud.get_user(db, user.username):        crud.promote_user(db, user.username)    else:        raise HTTPException(status_code=401, detail="User is not found")    return {"message": "User is promoted "}@app.post('/booking', tags=['BOOKING'])def booking(book_info: schemas.BookingBase, db: Session = Depends(get_db)):    if not crud.is_room_available(book_info, db):        crud.make_booking(db, book_info)    else:        return HTTPException(status_code=409, detail="the room is occupied")    return {"message": "The room is booked for You"}@app.get('/get-bookings', tags=['BOOKING'])def get_bookings(room_id: int, db: Session = Depends(get_db)):    return crud.get_bookings(room_id, db)@app.post('/test-booking',tags=['BOOKING'], deprecated=True)def test_booking(book_info: schemas.BookingBase, db: Session = Depends(get_db)):    crud.make_booking(db, book_info)    return {"message": "The room is booked for You"}@app.put('/booking-update', tags=['BOOKING'])def update_expire_room(db: Session = Depends(get_db)):    crud.update_expire_room(db)    return {"message": "Room's status is updated"}@app.put('/booking/{id}', tags=['BOOKING'])def Settlement(booking_id: int, db: Session = Depends(get_db)):    crud.settlement(booking_id, db)    return {"message": "The passenger has g0t its room"}@app.put('/booking/{id}/ex', tags=['BOOKING'])def update_failed_booked(booking_id: int, db: Session = Depends(get_db)):    crud.update_failed_booked(booking_id, db)    return {"message": "Room's status is updated"}@app.delete('/delete-booking', tags=['BOOKING'])def delete_booking(booking_id: int, db: Session = Depends(get_db)):    crud.delete_booking(booking_id, db)    return {"message": "The booking is deleted"}@app.post('/role')def is_user_is_admin(user: str, db: Session = Depends(get_db)):    return crud.is_user_is_admin(db, user)@app.post('/test')def test_booking(book_info: schemas.BookingBase, db: Session = Depends(get_db)):    crud.is_room_available(book_info, db)    return crud.is_room_available(book_info, db)